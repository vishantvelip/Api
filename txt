const express = require("express");
const mongoose = require("mongoose");
const path = require("path");
const projectRoutes = require("./routes/project");
const multer = require("multer");
const cors = require('cors');

const port = process.env.PORT || 8000;
const app = express();

// MongoDB connection


app.use(cors({
  origin: 'http://localhost:3000' // Allow requests from Project 1
}));

mongoose
  .connect(process.env.MONGO_URI || "mongodb://localhost:27017/evening123")
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.error("MongoDB connection error:", err));

// Set up view engine
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, "public")));

// Routes
app.use("/api", projectRoutes);

app.get("/", (req, res) => {
  res.render("home", { message: null, project: {} });
});

// Error handling middleware for Multer errors
app.use((err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    return res.status(400).render("edit-project", {
      project: req.body,
      message: `File upload error: ${err.message}`,
    });
  } else if (err) {
    return res.status(400).render("edit-project", {
      project: req.body,
      message: err.message || "An error occurred",
    });
  }
  next();
});

app.listen(port, () => console.log(`Server started at PORT: ${port}`));

PORT=8000 MONGO_URI=mongodb://localhost:27017/evening123


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>View Projects</title>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .container { position: relative; top: 20px; background-color: #515151; width: 100%; min-height: 100vh; display: flex; flex-direction: column; align-items: center; padding: 20px; box-sizing: border-box; }
    .project-list { max-width: 800px; width: 100%; padding: 20px; }
    .project-card { background-color: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2); margin-bottom: 20px; padding: 20px; display: flex; align-items: center; gap: 20px; flex-wrap: wrap; }
    .project-card img { max-width: 200px; width: 100%; height: auto; border-radius: 4px; }
    .project-details { flex: 1; min-width: 200px; }
    .project-details h3 { margin: 0 0 10px; color: #333; }
    .project-details p { margin: 5px 0; color: #666; }
    .action-buttons { display: flex; gap: 10px; }
    .edit-btn, .delete-btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; text-decoration: none; text-align: center; }
    .edit-btn { background-color: #007bff; color: white; }
    .edit-btn:hover { background-color: #0056b3; }
    .delete-btn { background-color: #dc3545; color: white; }
    .delete-btn:hover { background-color: #c82333; }
    .hero-subtitle { color: white; font-size: 24px; text-align: center; margin-bottom: 20px; }
    .back-btn { background-color: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; text-decoration: none; display: inline-block; margin-bottom: 20px; }
    .back-btn:hover { background-color: #218838; }
    .message { color: #fff; background-color: #dc3545; padding: 10px; border-radius: 4px; margin-bottom: 20px; text-align: center; max-width: 800px; width: 100%; }
    .message.success { background-color: #28a745; }
    .search-form { width: 100%; max-width: 800px; margin-bottom: 20px; }
    .search-form input { width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc; box-sizing: border-box; }
    .search-form button { padding: 8px 16px; background-color: #007bff; color: white; border: none; border-radius: 4px; margin-top: 10px; cursor: pointer; }
    .search-form button:hover { background-color: #0056b3; }
    @media (max-width: 600px) { .project-card { flex-direction: column; align-items: flex-start; } .project-card img { max-width: 100%; } }
  </style>
</head>
<body>
  <div class="container">
    <h2 class="hero-subtitle">Your Projects</h2>
    <% if (message) { %>
      <div class="message <%= message.includes('successfully') ? 'success' : '' %>">
        <%= message %>
      </div>
    <% } %>
    <form action="/api/view" method="get" class="search-form">
      <input type="text" name="search" placeholder="Search by project name or title" value="<%= searchQuery || '' %>">
      <button type="submit">Search</button>
    </form>
    <a href="/" class="back-btn">Back to Home</a>
    <div class="project-list">
      <% if (projects && projects.length > 0) { %>
        <% projects.forEach(project => { %>
          <div class="project-card">
            <% if (project.projectImg) { %>
              <img src="/<%= project.projectImg %>" alt="<%= project.name %>" onerror="this.src='/uploads/placeholder.jpg'">
            <% } else { %>
              <img src="/uploads/placeholder.jpg" alt="No image">
            <% } %>
            <div class="project-details">
              <h3><%= project.name %></h3>
              <p><strong>Title:</strong> <%= project.title %></p>
              <p><strong>Description:</strong> <%= project.description %></p>
              <p><strong>Created:</strong> <%= project.createdAt.toLocaleDateString() %></p>
              <div class="action-buttons">
                <a href="/api/edit/<%= project._id %>" class="edit-btn">Edit</a>
                <form action="/api/delete/<%= project._id %>" method="post" onsubmit="return confirm('Are you sure you want to delete this project?');" style="display:inline;">
                  <button type="submit" class="delete-btn">Delete</button>
                </form>
              </div>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <p>No projects found.</p>
      <% } %>
    </div>
  </div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Project Management</title>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .container { position: relative; top: 20px; background-color: #515151; width: 100%; min-height: 100vh; display: flex; flex-direction: column; align-items: center; padding: 20px; box-sizing: border-box; }
    .hero-subtitle { color: white; font-size: 24px; text-align: center; margin-bottom: 20px; }
    .submit-btn { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; text-decoration: none; display: inline-block; margin: 10px; }
    .submit-btn:hover { background-color: #0056b3; }
    .message { color: #fff; background-color: #dc3545; padding: 10px; border-radius: 4px; margin-bottom: 20px; text-align: center; max-width: 500px; width: 100%; }
    .message.success { background-color: #28a745; }
    .form-group { margin-bottom: 15px; width: 100%; max-width: 500px; }
    .form-group label { display: block; color: white; margin-bottom: 5px; }
    .form-group input, .form-group textarea { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }
    .form-group textarea { resize: vertical; }
    button[type="submit"] { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
    button[type="submit"]:hover { background-color: #0056b3; }
  </style>
</head>
<body>
  <div class="container">
    <h2 class="hero-subtitle">Project Management</h2>
    <% if (message) { %>
      <div class="message <%= message.includes('successfully') ? 'success' : '' %>">
        <%= message %>
      </div>
    <% } %>
    <form action="/api/create-project" method="post" enctype="multipart/form-data">
      <div class="form-group">
        <label for="name">Project Name</label>
        <input type="text" id="name" name="name" value="<%= project?.name || '' %>" required>
      </div>
      <div class="form-group">
        <label for="title">Project Title</label>
        <input type="text" id="title" name="title" value="<%= project?.title || '' %>" required>
      </div>
      <div class="form-group">
        <label for="description">Project Description</label>
        <textarea id="description" name="description" rows="5" required><%= project?.description || '' %></textarea>
      </div>
      <div class="form-group">
        <label for="projectImg">Project Image</label>
        <input type="file" id="projectImg" name="projectImg" accept="image/jpeg,image/png">
      </div>
      <button type="submit">Create Project</button>
    </form>
    <a href="/api/view" class="submit-btn">View Projects</a>
  </div>
  <script>
    document.querySelector('form').addEventListener('submit', (e) => {
      const name = document.getElementById('name').value.trim();
      const title = document.getElementById('title').value.trim();
      const description = document.getElementById('description').value.trim();
      if (!name || !title || !description) {
        e.preventDefault();
        alert('All fields are required.');
      }
    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Edit Project</title>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .container { position: relative; top: 20px; background-color: #515151; width: 100%; min-height: 100vh; display: flex; flex-direction: column; align-items: center; padding: 20px; box-sizing: border-box; }
    h2 { color: white; font-size: 24px; text-align: center; margin-bottom: 20px; }
    .form-group { margin-bottom: 15px; width: 100%; max-width: 500px; }
    .form-group label { display: block; color: white; margin-bottom: 5px; }
    .form-group input, .form-group textarea { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }
    .form-group textarea { resize: vertical; }
    .form-group img { max-width: 100px; height: auto; margin-top: 10px; border-radius: 4px; }
    button[type="submit"] { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
    button[type="submit"]:hover { background-color: #0056b3; }
    .message { color: #fff; background-color: #dc3545; padding: 10px; border-radius: 4px; margin-bottom: 20px; text-align: center; max-width: 500px; width: 100%; }
    .message.success { background-color: #28a745; }
    a { color: white; text-decoration: none; padding: 10px 20px; background-color: #28a745; border-radius: 4px; margin-top: 20px; display: inline-block; }
    a:hover { background-color: #218838; }
  </style>
</head>
<body>
  <div class="container">
    <h2>Edit Project</h2>
    <% if (message) { %>
      <div class="message <%= message.includes('Failed') ? 'error' : 'success' %>">
        <%= message %>
      </div>
    <% } %>
    <% if (project) { %>
      <form action="/api/update-project/<%= project._id %>" method="post" enctype="multipart/form-data">
        <div class="form-group">
          <label for="name">Project Name</label>
          <input type="text" id="name" name="name" value="<%= project.name %>" required>
        </div>
        <div class="form-group">
          <label for="title">Project Title</label>
          <input type="text" id="title" name="title" value="<%= project.title %>" required>
        </div>
        <div class="form-group">
          <label for="description">Project Description</label>
          <textarea id="description" name="description" rows="5" required><%= project.description %></textarea>
        </div>
        <div class="form-group">
          <label for="projectImg">Project Image</label>
          <input type="file" id="projectImg" name="projectImg" accept="image/jpeg,image/png">
          <% if (project.projectImg) { %>
            <p>Current image: <img src="/<%= project.projectImg %>" alt="Current project image"></p>
          <% } %>
        </div>
        <button type="submit">Update Project</button>
      </form>
    <% } else { %>
      <div class="message">Project not found. <a href="/api/view">Return to projects</a></div>
    <% } %>
    <a href="/api/view">View Projects</a>
  </div>
  <script>
    document.querySelector('form')?.addEventListener('submit', (e) => {
      const name = document.getElementById('name')?.value.trim();
      const title = document.getElementById('title')?.value.trim();
      const description = document.getElementById('description')?.value.trim();
      if (!name || !title || !description) {
        e.preventDefault();
        alert('All fields are required.');
      }
    });
  </script>
</body>
</html>

const { Router } = require("express");
const Project = require("../models/project");
const fs = require("fs").promises;
const path = require("path");
const upload = require("../middleware/multerConfig");
const mongoose = require("mongoose");

const router = Router();

// View all projects with search
router.get("/view", async (req, res) => {
  try {
    const searchQuery = req.query.search || "";
    const query = searchQuery
      ? {
          $or: [
            { name: { $regex: searchQuery, $options: "i" } },
            { title: { $regex: searchQuery, $options: "i" } },
          ],
        }
      : {};
    const projects = await Project.find(query);
    res.render("view-project", { projects, message: null, searchQuery });
  } catch (error) {
    res.status(500).render("view-project", {
      projects: [],
      message: "Failed to load projects",
      searchQuery: "",
    });
  }
});

// Create a new project
router.post("/create-project", upload.single("projectImg"), async (req, res) => {
  try {
    const { name, title, description } = req.body;
    if (!name || !title || !description) {
      return res.status(400).render("home", {
        project: req.body,
        message: "All fields are required",
      });
    }
    let projectImg = "";
    if (req.file) {
      projectImg = `uploads/${req.file.filename}`;
    }
    const newProject = new Project({
      name,
      title,
      description,
      projectImg,
    });
    await newProject.save();
    res.render("home", {
      project: {},
      message: "Project created successfully",
    });
  } catch (error) {
    res.status(500).render("home", {
      project: req.body,
      message: error.message || "Failed to create project",
    });
  }
});

// Get edit project form
router.get("/edit/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    res.render("edit-project", { project, message: null });
  } catch (error) {
    const projects = await Project.find();
    res.status(500).render("view-project", {
      projects,
      message: `Failed to load project: ${error.message}`,
      searchQuery: "",
    });
  }
});

// Update a project
router.post("/update-project/:id", upload.single("projectImg"), async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const { name, title, description } = req.body;
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    if (!name || !title || !description) {
      return res.status(400).render("edit-project", {
        project,
        message: "All fields are required",
      });
    }
    let projectImg = project.projectImg;
    if (req.file) {
      // Delete old image if it exists
      if (projectImg) {
        try {
          await fs.unlink(path.join(__dirname, "../public", projectImg));
        } catch (err) {}
      }
      projectImg = `uploads/${req.file.filename}`;
    }
    await Project.findByIdAndUpdate(req.params.id, {
      name,
      title,
      description,
      projectImg,
    });
    const projects = await Project.find();
    res.render("view-project", {
      projects,
      message: "Project updated successfully",
      searchQuery: "",
    });
  } catch (error) {
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    res.status(500).render("edit-project", {
      project,
      message: error.message || "Failed to update project",
    });
  }
});

// Delete a project
router.post("/delete/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    if (project.projectImg) {
      try {
        await fs.unlink(path.join(__dirname, "../public", project.projectImg));
      } catch (err) {}
    }
    await Project.findByIdAndDelete(req.params.id);
    const projects = await Project.find();
    res.render("view-project", {
      projects,
      message: "Project deleted successfully",
      searchQuery: "",
    });
  } catch (error) {
    const projects = await Project.find();
    res.status(500).render("view-project", {
      projects,
      message: "Failed to delete project",
      searchQuery: "",
    });
  }
});

module.exports = router;

const { Schema, model } = require("mongoose");

const projectSchema = new Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    title: {
      type: String,
      required: true,
      trim: true,
    },
    description: {
      type: String,
      required: true,
      trim: true,
    },
    projectImg: {
      type: String,
      required: false,
      default: "",
    },
  },
  { timestamps: true }
);

module.exports = model("Project", projectSchema);

const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "../public/uploads"));
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
  fileFilter: (req, file, cb) => {
    const fileTypes = /jpeg|jpg|png/;
    const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = fileTypes.test(file.mimetype);
    if (extname && mimetype) {
      return cb(null, true);
    }
    cb(new Error("Only JPEG and PNG images are allowed"));
  },
});

module.exports = upload;

i want to this api projects data fetch http://localhost:8000/api/view
to my portfolio page 


this is portfolio page 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vishant Velip - Full Stack Developer</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #1f2937;
      overflow-x: hidden;
      background: #f5f5f4;
      transition: background 0.3s ease, color 0.3s ease;
    }

    body.dark-mode {
      background: #1e2937;
      color: #f3f4f6;
    }

    /* Navigation */
    .navbar {
      position: fixed;
      top: 0;
      width: 100%;
      background: #1e3a8a;
      backdrop-filter: blur(10px);
      z-index: 1000;
      padding: 1rem 0;
      transition: all 0.3s ease;
    }

    body.dark-mode .navbar {
      background: #111827;
    }

    .navbar.scrolled {
      background: #000000;
      box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
    }

    body.dark-mode .navbar.scrolled {
      background: #1f2937;
    }

    .nav-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .logo {
      font-size: 1.9rem;
      font-weight: bold;
      color: #2dd4bf;
    }
    
    .logo img {
      width: 500px;
      height: 500px;
      border-radius: 100px;
    }

    .nav-menu {
      display: flex;
      list-style: none;
      gap: 2rem;
    }

    .nav-link {
      text-decoration: none;
      color: #f3f4f6;
      font-weight: 500;
      transition: color 0.3s ease;
      position: relative;
    }

    body.dark-mode .nav-link {
      color: #f3f4f6;
    }

    .nav-link:hover {
      color: #14b8a6;
    }

    .nav-link::after {
      content: '';
      position: absolute;
      width: 0;
      height: 2px;
      bottom: -5px;
      left: 0;
      background-color: #14b8a6;
      transition: width 0.3s ease;
    }

    .nav-link:hover::after {
      width: 100%;
    }

    .mobile-menu {
      display: none;
      flex-direction: column;
      cursor: pointer;
    }

    .mobile-menu span {
      width: 25px;
      height: 3px;
      background: #f3f4f6;
      margin: 3px 0;
      transition: 0.3s;
    }

    body.dark-mode .mobile-menu span {
      background: #f3f4f6;
    }

    /* Dark Mode Toggle Button */
    .dark-mode-toggle {
      background: none;
      border: none;
      color: #f3f4f6;
      font-size: 1.2rem;
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .dark-mode-toggle:hover {
      color: #14b8a6;
    }

    /* Hero Section */
    .hero {
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      color: #fb7185;
      position: relative;
      overflow: hidden;
    }

    .hero-video {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      z-index: 1;
    }

    .hero::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.4);
      z-index: 2;
    }

    .hero-content {
      position: relative;
      z-index: 3;
      animation: fadeInUp 1s ease;
    }

    .hero h1 {
      font-size: 3.5rem;
      margin-bottom: 1rem;
      font-weight: 700;
    }

    .hero .subtitle {
      font-size: 1.5rem;
      margin-bottom: 2rem;
      opacity: 0.9;
    }

    .cta-button {
      display: inline-block;
      padding: 12px 30px;
      background: rgba(245, 245, 244, 0.2);
      color: #f3f4f6;
      text-decoration: none;
      border-radius: 50px;
      border: 2px solid rgba(245, 245, 244, 0.3);
      transition: all 0.3s ease;
      font-weight: 500;
    }

    body.dark-mode .cta-button {
      background: rgba(31, 41, 55, 0.2);
      border: 2px solid rgba(243, 244, 246, 0.3);
      color: #f3f4f6;
    }

    .cta-button:hover {
      background: rgba(245, 245, 244, 0.3);
      transform: translateY(-2px);
    }

    body.dark-mode .cta-button:hover {
      background: rgba(31, 41, 55, 0.3);
    }

    /* Sections */
    .section {
      padding: 80px 0;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
    }

    .section-title {
      text-align: center;
      font-size: 2.5rem;
      margin-bottom: 3rem;
      color: #1f2937;
      position: relative;
    }

    body.dark-mode .section-title {
      color: #f3f4f6;
    }

    .section-title::after {
      content: '';
      position: absolute;
      width: 50px;
      height: 3px;
      background: #2dd4bf;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
    }

    /* About Section */
    .about {
      background: #f5f5f4;
    }

    body.dark-mode .about {
      background: #1e2937;
    }

    .about-content {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 4rem;
      align-items: center;
    }

    .about-image {
      text-align: center;
    }

    .profile-img {
      width: 350px;
      height: 350px;
      border-radius: 50%;
      object-fit: cover;
      display: block;
      margin: 0 auto;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .about-text {
      font-size: 1.1rem;
      line-height: 1.8;
      color: #1f2937;
    }

    body.dark-mode .about-text {
      color: #f3f4f6;
    }

    /* Skills Section */
    .skills-grid {
      display: grid;
      grid-template-columns: repeat(2, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .skill-card {
      background: #e5e7eb;
      padding: 2rem;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      border: 1px solid #d1d5db;
    }

    body.dark-mode .skill-card {
      background: #111827;
      border: 1px solid #374151;
    }

    .skill-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }

    .skill-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      color: #2dd4bf;
    }

    .skill-card h3 {
      font-size: 1.3rem;
      margin-bottom: 1rem;
      color: #1f2937;
    }

    body.dark-mode .skill-card h3 {
      color: #f3f4f6;
    }

    .skill-card p {
      color: #4b5563;
      line-height: 1.6;
    }

    body.dark-mode .skill-card p {
      color: #d1d5db;
    }

    /* Projects Section */
    .projects {
      background: #f5f5f4;
    }

    body.dark-mode .projects {
      background: #1e2937;
    }

    .projects-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .project-card {
      background: #e5e7eb;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease;
    }

    body.dark-mode .project-card {
      background: #111827;
    }

    .project-card:hover {
      transform: translateY(-5px);
    }

    .project-image {
      height: 200px;
      background: linear-gradient(135deg, #2dd4bf 0%, #1e3a8a 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: #f3f4f6;
      font-size: 2rem;
      overflow: hidden;
    }

    .project-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .project-content {
      padding: 1.5rem;
    }

    .project-content h3 {
      font-size: 1.3rem;
      margin-bottom: 1rem;
      color: #1f2937;
    }

    body.dark-mode .project-content h3 {
      color: #f3f4f6;
    }

    .project-content p {
      color: #4b5563;
      margin-bottom: 1rem;
    }

    body.dark-mode .project-content p {
      color: #d1d5db;
    }

    .project-tech {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .tech-tag {
      background: #d1d5db;
      color: #1f2937;
      padding: 0.25rem 0.75rem;
      border-radius: 15px;
      font-size: 0.8rem;
    }

    body.dark-mode .tech-tag {
      background: #374151;
      color: #f3f4f6;
    }

    .loading {
      text-align: center;
      padding: 2rem;
      color: #4b5563;
    }

    body.dark-mode .loading {
      color: #d1d5db;
    }

    .error {
      text-align: center;
      padding: 2rem;
      color: #dc2626;
      background: #fef2f2;
      border-radius: 10px;
      margin: 2rem 0;
    }

    body.dark-mode .error {
      background: #1f1f1f;
      color: #f87171;
    }

    /* Contact Section */
    .contact {
      background: #172554;
      color: #f3f4f6;
    }

    body.dark-mode .contact {
      background: #111827;
    }

    .contact .section-title {
      color: #f3f4f6;
    }

    .contact .section-title::after {
      background: #2dd4bf;
    }

    .contact-content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 4rem;
      margin-top: 2rem;
    }

    .contact-info {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .contact-item {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .contact-item i {
      font-size: 1.5rem;
      color: #2dd4bf;
      width: 30px;
    }

    .contact-form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    .form-group label {
      margin-bottom: 0.5rem;
      color: #d1d5db;
    }

    .form-group input,
    .form-group textarea {
      padding: 0.75rem;
      border: 1px solid #4b5563;
      border-radius: 5px;
      background: #1e3a8a;
      color: #f3f4f6;
      font-family: inherit;
    }

    body.dark-mode .form-group input,
    body.dark-mode .form-group textarea {
      background: #1e3a8a;
      border: 1px solid #6b7280;
    }

    .form-group input:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #2dd4bf;
    }

    .submit-btn {
      padding: 0.75rem 2rem;
      background: #2dd4bf;
      color: #1f2937;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      transition: background 0.3s ease;
    }

    body.dark-mode .submit-btn {
      color: #f3f4f6;
    }

    .submit-btn:hover {
      background: #14b8a6;
    }

    /* Footer */
    .footer {
      background: #172554;
      color: #f3f4f6;
      text-align: center;
      padding: 2rem 0;
    }

    body.dark-mode .footer {
      background: #111827;
    }

    .social-links {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .social-links a {
      color: #f3f4f6;
      font-size: 1.5rem;
      transition: color 0.3s ease;
    }

    .social-links a:hover {
      color: #2dd4bf;
    }

    /* Animations */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in {
      opacity: 0;
      transform: translateY(30px);
      transition: all 0.6s ease;
    }

    .fade-in.visible {
      opacity: 1;
      transform: translateY(0);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .nav-menu {
        display: none;
      }

      .mobile-menu {
        display: flex;
      }

      .hero h1 {
        font-size: 2.5rem;
      }

      .hero .subtitle {
        font-size: 1.2rem;
      }

      .about-content {
        grid-template-columns: 1fr;
        text-align: center;
      }

      .contact-content {
        grid-template-columns: 1fr;
      }

      .skills-grid {
        grid-template-columns: 1fr;
      }

      .projects-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Navigation -->
  <nav class="navbar" id="navbar">
    <div class="nav-container">
      <div class="logo">
        <img src="https://raw.githubusercontent.com/vishantvelip/NewsPulse/refs/heads/main/IMG_20250511_113439_277.webp" alt="Vishant Velip Logo" style="height: 40px; width: auto; vertical-align: middle;">
      </div>
      <ul style="background-color: #1f2937;" class="nav-menu">
        <li><a href="#home" class="nav-link">Home</a></li>
        <li><a href="#about" class="nav-link">About</a></li>
        <li><a href="#skills" class="nav-link">Skills</a></li>
        <li><a href="#projects" class="nav-link">Projects</a></li>
        <li><a href="#contact" class="nav-link">Contact</a></li>
      </ul>
      <div class="mobile-menu">
        <span></span>
        <span></span>
        <span></span>
      </div>
      <button class="dark-mode-toggle" id="darkModeToggle">
        <i class="fas fa-moon"></i>
      </button>
    </div>
  </nav>

  <!-- Hero Section -->
  <section id="home" class="hero">
    <video class="hero-video" autoplay loop muted playsinline>
      <source src="https://raw.githubusercontent.com/vishantvelip/NewsPulse/main/2887463-sd_640_360_25fps.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
    <div class="hero-content">
      <h1>Welcome To web Page</h1>
      <p class="subtitle">Full Stack Developer</p>
      <a href="#about" class="cta-button">Learn More About Me</a>
    </div>
  </section>

  <!-- About Section -->
  <section id="about" class="section about">
    <div class="container">
      <h2 class="section-title fade-in">About Me</h2>
      <div class="about-content">
        <div class="about-image fade-in">
          <img src="https://raw.githubusercontent.com/vishantvelip/NewsPulse/refs/heads/main/IMG_20250511_113439_277.webp" alt="Vishant Velip Profile" class="profile-img">
        </div>
        <div class="about-text fade-in">
          <p>Hello! I'm Vishant Velip, a passionate Full Stack Developer with expertise in modern web technologies. I love creating efficient, scalable, and user-friendly applications that solve real-world problems.</p>
          <p>With a strong foundation in both frontend and backend development, I enjoy working with cutting-edge technologies and continuously learning new skills to stay ahead in the ever-evolving tech landscape.</p>
          <p>When I'm not coding, you can find me exploring new technologies, contributing to open-source projects, or sharing knowledge with the developer community.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Skills Section -->
  <section id="skills" class="section">
    <div class="container">
      <h2 class="section-title fade-in">My Skills</h2>
      <div class="skills-grid">
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fab fa-html5"></i>
          </div>
          <h3>HTML5</h3>
          <p>Semantic markup and modern HTML5 features for building structured web content.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fab fa-css3-alt"></i>
          </div>
          <h3>CSS3</h3>
          <p>Advanced styling with CSS3, Flexbox, Grid, and responsive design principles.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fab fa-js-square"></i>
          </div>
          <h3>JavaScript</h3>
          <p>Modern ES6+ JavaScript for dynamic and interactive web applications.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fab fa-node-js"></i>
          </div>
          <h3>Node.js</h3>
          <p>Server-side JavaScript development with Node.js for scalable backend solutions.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fas fa-database"></i>
          </div>
          <h3>MongoDB</h3>
          <p>NoSQL database design and management with MongoDB for flexible data storage.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fas fa-server"></i>
          </div>
          <h3>Express.js</h3>
          <p>Fast and minimalist web framework for Node.js backend development.</p>
        </div>
        <div class="skill-card fade-in">
          <div class="skill-icon">
            <i class="fab fa-docker"></i>
          </div>
          <h3>Docker</h3>
          <p>Containerization and deployment with Docker for consistent development environments.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Projects Section -->
  <section id="projects" class="section projects">
    <div class="container">
      <h2 class="section-title fade-in">Featured Projects</h2>
      <div class="projects-grid" id="projects-grid">
        <div class="loading">Loading projects...</div>
      </div>
    </div>
  </section>

  <!-- Contact Section -->
  <section id="contact" class="section contact">
    <div class="container">
      <h2 class="section-title fade-in">Get In Touch</h2>
      <div class="contact-content">
        <div class="contact-info fade-in">
          <div class="contact-item">
            <i class="fas fa-envelope"></i>
            <div>
              <h4>Email</h4>
              <p>velipvishant8@gmail.com</p>
            </div>
          </div>
          <div class="contact-item">
            <i class="fas fa-phone"></i>
            <div>
              <h4>Phone</h4>
              <p>+91 9420970930</p>
            </div>
          </div>
          <div class="contact-item">
            <i class="fas fa-map-marker-alt"></i>
            <div>
              <h4>Location</h4>
              <p>India</p>
            </div>
          </div>
        </div>
        <form class="contact-form fade-in" id="contact-form">
          <div class="form-group">
            <label for="name">Name</label>
            <input type="text" id="name" name="name" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="message">Message</label>
            <textarea id="message" name="message" rows="5" required></textarea>
          </div>
          <button type="submit" class="submit-btn">Send Message</button>
        </form>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="footer">
    <div class="container">
      <div class="social-links">
        <a href="#"><i class="fab fa-github"></i></a>
        <a href="#"><i class="fab fa-linkedin"></i></a>
        <a href="#"><i class="fab fa-twitter"></i></a>
        <a href="#"><i class="fas fa-envelope"></i></a>
      </div>
      <p>© 2024 Vishant Velip. All rights reserved.</p>
    </div>
  </footer>

  <script>
  // Function to fetch and display projects
  async function loadProjects() {
    const projectsGrid = document.getElementById('projects-grid');
    
    try {
      const response = await fetch('http://localhost:8000/api/view');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Clear loading message
      projectsGrid.innerHTML = '';
      
      if (data.projects && data.projects.length > 0) {
        data.projects.forEach(project => {
          const projectCard = document.createElement('div');
          projectCard.className = 'project-card fade-in';
          
          // Create image element or fallback icon
          const imageContent = project.projectImg 
            ? `<img src="http://localhost:8000/${project.projectImg}" alt="${project.name}" onerror="this.parentElement.innerHTML='<i class=\\'fas fa-code\\'></i>'">` 
            : '<i class="fas fa-code"></i>';
          
          // Format date
          const createdDate = new Date(project.createdAt).toLocaleDateString();
          
          projectCard.innerHTML = `
            <div class="project-image">
              ${imageContent}
            </div>
            <div class="project-content">
              <h3>${project.name}</h3>
              <p><strong>Title:</strong> ${project.title}</p>
              <p>${project.description}</p>
              <p><small>Created: ${createdDate}</small></p>
              <div class="project-tech">
                <span class="tech-tag">Project</span>
                <span class="tech-tag">Portfolio</span>
              </div>
            </div>
          `;
          
          projectsGrid.appendChild(projectCard);
        });
        
        // Re-observe new elements for fade-in animation
        document.querySelectorAll('.project-card.fade-in').forEach(el => {
          observer.observe(el);
        });
        
      } else {
        projectsGrid.innerHTML = '<div class="error">No projects found.</div>';
      }
      
    } catch (error) {
      console.error('Error fetching projects:', error);
      projectsGrid.innerHTML = `
        <div class="error">
          <p>Failed to load projects. Please check if your API server is running on http://localhost:8000</p>
          <p>Error: ${error.message}</p>
        </div>
      `;
    }
  }

  // Dark Mode Toggle
  const toggleDarkMode = () => {
    document.body.classList.toggle('dark-mode');
    const isDarkMode = document.body.classList.contains('dark-mode');
    localStorage.setItem('darkMode', isDarkMode);
    const toggleButton = document.getElementById('darkModeToggle');
    toggleButton.innerHTML = isDarkMode ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
  };

  // Check for saved dark mode preference
  window.addEventListener('load', () => {
    if (localStorage.getItem('darkMode') === 'true') {
      document.body.classList.add('dark-mode');
      document.getElementById('darkModeToggle').innerHTML = '<i class="fas fa-sun"></i>';
    }
    
    // Load projects when page loads
    loadProjects();
  });

  // Add event listener to dark mode toggle button
  document.getElementById('darkModeToggle').addEventListener('click', toggleDarkMode);

  // Smooth scrolling for navigation links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
        });
      }
    });
  });

  // Navbar scroll effect
  window.addEventListener('scroll', function () {
    const navbar = document.getElementById('navbar');
    if (window.scrollY > 50) {
      navbar.classList.add('scrolled');
    } else {
      navbar.classList.remove('scrolled');
    }
  });

  // Mobile menu toggle
  const mobileMenu = document.querySelector('.mobile-menu');
  const navMenu = document.querySelector('.nav-menu');
  mobileMenu.addEventListener('click', () => {
    navMenu.classList.toggle('active');
    mobileMenu.classList.toggle('open');
  });

  // Intersection Observer for fade-in animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px',
  };

  const observer = new IntersectionObserver(function (entries) {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, observerOptions);

  document.querySelectorAll('.fade-in').forEach(el => {
    observer.observe(el);
  });

  // Contact form submission with Fetch API
  document.getElementById('contact-form').addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = new FormData(this);
    const name = formData.get('name');
    const email = formData.get('email');
    const message = formData.get('message');

    // Simple client-side validation
    if (name && email && message) {
      try {
        const response = await fetch('http://localhost:3000/api/send-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name, email, message }),
        });

        const result = await response.json();
        if (response.ok) {
          alert('Thank you for your message! I\'ll get back to you soon.');
          document.getElementById('contact-form').reset();
        } else {
          alert(result.error || 'Failed to send message. Please try again later.');
        }
      } catch (error) {
        alert('Failed to send message. Please try again later.');
        console.error('Fetch error:', error);
      }
    } else {
      alert('Please fill in all fields.');
    }
  });

  // Add typing effect to hero subtitle
  function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.innerHTML = '';

    function type() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    }

    type();
  }

  window.addEventListener('load', function () {
    const subtitle = document.querySelector('.hero .subtitle');
    const originalText = subtitle.textContent;
    typeWriter(subtitle, originalText, 150);
  });

  // Add parallax effect to hero video
  window.addEventListener('scroll', function () {
    const scrolled = window.pageYOffset;
    const heroVideo = document.querySelector('.hero-video');
    const rate = scrolled * -0.5;

    if (heroVideo) {
      heroVideo.style.transform = `translateY(${rate}px)`;
    }
  });

  // Add hover effect to skill cards
  document.querySelectorAll('.skill-card').forEach(card => {
    card.addEventListener('mouseenter', function () {
      this.style.transform = 'translateY(-10px) scale(1.02)';
    });

    card.addEventListener('mouseleave', function () {
      this.style.transform = 'translateY(0) scale(1)';
    });
  });

  // Add click effect to CTA button
  document.querySelector('.cta-button').addEventListener('click', function (e) {
    const ripple = document.createElement('span');
    const rect = this.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;

    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');

    this.appendChild(ripple);

    setTimeout(() => {
      ripple.remove();
    }, 600);
  });

  // Add CSS for ripple effect and mobile menu
  const style = document.createElement('style');
  style.textContent = `
    .cta-button {
      position: relative;
      overflow: hidden;
    }

    .ripple {
      position: absolute;
      border-radius: 50%;
      background: rgba(245, 245, 244, 0.3);
      transform: scale(0);
      animation: ripple-animation 0.6s linear;
      pointer-events: none;
    }

    body.dark-mode .ripple {
      background: rgba(243, 244, 246, 0.3);
    }

    @keyframes ripple-animation {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }

    /* Mobile menu styles */
    .nav-menu.active {
      display: flex;
      flex-direction: column;
      position: absolute;
      top: 60px;
      left: 0;
      right: 0;
      background: rgba(245, 245, 244, 0.95);
      padding: 1rem;
      box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
    }

    body.dark-mode .nav-menu.active {
      background: rgba(31, 41, 55, 0.95);
    }

    .mobile-menu.open span:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px);
    }

    .mobile-menu.open span:nth-child(2) {
      opacity: 0;
    }

    .mobile-menu.open span:nth-child(3) {
      transform: rotate(-45deg) translate(7px, -7px);
    }
  `;
  document.head.appendChild(style);
</script>
  
</body>
</html>
