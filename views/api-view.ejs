<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Project View (API View)</title>
  <style>
    body { background: linear-gradient(135deg,#232526,#414345); margin: 0; font-family: 'Segoe UI', Arial, sans-serif; min-height: 100vh; }
    .container { max-width: 800px; background: rgba(255,255,255,0.07); margin: 40px auto; border-radius: 16px; padding: 32px 24px 24px 24px; }
    .search-form { margin-bottom: 24px; display: flex; gap: 10px; flex-wrap: wrap;}
    .search-form input {
      flex: 1 1 240px;
      padding: 10px;
      border-radius: 6px;
      border: none;
      font-size: 1rem;
      background: #f3f3f3;
      outline: none;
      box-sizing: border-box;
      transition: box-shadow 0.2s;
    }
    .search-form input:focus { box-shadow: 0 0 2px #007bff33; background: #fff;}
    .search-form button {
      padding: 10px;
      background: linear-gradient(90deg, #007bff, #00d2ff);
      color: #fff;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.2s;
    }
    .search-form button:hover { background: linear-gradient(90deg,#0056b3,#0099cc);}
    .project-list { display: flex; flex-direction: column; gap: 18px;}
    .project-card {
      display: flex;
      gap: 22px;
      background: #fff;
      border-radius: 10px;
      padding: 18px;
      box-shadow: 0 2px 12px rgba(0,0,0,0.08);
      align-items: center;
      flex-wrap: wrap;
      animation: fadeIn 0.5s;
    }
    .project-card img {
      width: 140px; height: auto;
      object-fit: cover;
      border-radius: 6px;
      background: #eee;
    }
    .project-details { flex: 1 1 160px; min-width: 160px;}
    .project-details h3 { margin: 0 0 6px; color: #232526; font-size: 1.15rem;}
    .project-details p { margin: 4px 0; color: #444;}
    .action-buttons { display: flex; gap: 10px; margin-top: 12px;}
    .edit-btn, .delete-btn {
      padding: 8px 18px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.95rem;
      text-decoration: none;
      text-align: center;
      font-weight: 500;
      transition: background 0.2s;
    }
    .edit-btn { background: linear-gradient(90deg,#007bff,#00d2ff); color: white;}
    .edit-btn:hover { background: linear-gradient(90deg,#0056b3,#0099cc);}
    .delete-btn { background: linear-gradient(90deg,#dc3545,#ff6b6a); color: white;}
    .delete-btn:hover { background: linear-gradient(to90deg,#c82333,#ff6a6a);}
    .back-btn {
      background: linear-gradient(90deg, #28a745, #84d9a2);
      color: #fff; font-weight: bold;
      padding: 10px 22px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      text-decoration: none;
      margin-bottom: 18px;
      display: inline-block;
      transition: background .2s;
    }
    .back-btn:hover { background: linear-gradient(to90deg,#218838,#43e97b);}
    .error-message, .success-message {
      color: #fff;
      border-radius: 6px;
      padding: 10px 0;
      text-align: center;
      margin-bottom: 18px;
    }
    .error-message { background: #dc3545;}
    .success-message { background: linear-gradient(90deg(to90deg,#28a745,#84d9a2);}
    }
    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: auto 100%;
      background: rgba(0,0,0,0.6);
      z-index: 1000;
      align-items: center;
      justify-content: center;
    }
    .modal-content {
      background: #fff;
      border-radius: 10px;
      padding: 24px;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 4px 24px rgba(0,0,0,0.3);
      position: relative;
      animation: fadeIn 0.3s;
    }
    .modal-content h2 { margin: 0 0; margin-bottom: 20px; color: #232526; font-size: 1.5rem;}
    .close-btn {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 1.5rem;
      cursor: pointer;
      color: #444;
    }
    .form-group { margin-bottom: 15px;}
    .form-group label { display: block; margin-bottom: 5px; color: #232526; font-size: 1rem;}
    .form-group input, .form-group textarea { {
      width: 100%;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1rem;
      box-sizing: border-box;
    }
    .form-group textarea { resize: vertical; min-height: 80px; 80px;}
    }
    .form-group input[type="file"] { border: none; padding: 5px 0;}
    .modal-content button[type="submit"] { background: linear-gradient(90deg, #007bff, #00d2ff);
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: background 0.2s;
    }
    .modal-content button[type="submit"]:hover { {
    background: linear-gradient(90deg, #0056b3,#0099cc);
    }
    @media (min-width: 640px) {
      .container { padding: 16px 4px;}
      .project-card { flex-direction: column; align-items: flex-start;}
      .project-card img { width: 100%; height: 170px;}
      .modal-content { padding: 16px;}
    }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(16px);} to { opacity: to1; transform: translateY(0);} }
  </style>
</head>
<body>
  <div class="container">
    <form class="search-form" id="search-form">
      <input type="text" id="search-input" placeholder="Search by project name or title">
      <button type="submit">Search</button>
    </form>
    <a href="/" class="back-btn">Back to Home</a>
    <div id="message" class="message"></div>
    <div class="project-list" id="project-list"></div>
  </div>
  <!-- Modal for Editing Project -->
  <div class="modal" id="edit-modal">
    <div class="modal-content">
      <span class="close-btn" onclick="closeModal()">Ã—</span>
      <h2>Edit Project</h2>
      <form id="edit-form" enctype="multipart/form-data">
        <input type="hidden" id="edit-id" name="id">
        <div class="form-group">
          <label for="edit-name">Project Name</label>
          <input type="text" id="edit-name" name="name" required>
        </div>
        <div class="form-group">
          <label for="edit-title">Project Title</label>
          <input type="text" id="edit-title" name="title" required>
        </div>
        <div class="form-group">
          <label for="edit-description">Project Description</label>
          <textarea id="edit-description" name="description" required></textarea>
        </div>
        <div class="form-group">
          <label for="edit-projectImg">Project Image</label>
          <input type="file" id="edit-projectImg" name="projectImg" accept="image/jpeg,image/png">
        </div>
        <button type="submit">Update Project</button>
      </form>
    </div>
  </div>
  <script>
    async function fetchProjects(searchQuery = '') {
      try {
        const url = searchQuery 
          ? `/api/view?search=${encodeURIComponent(searchQuery)}`
          : '/api/view';
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        const projects = await response.json();
        const projectList = document.getElementById('project-list');
        projectList.innerHTML = '';
        const messageDiv = document.getElementById('message');
        messageDiv.innerHTML = '';
        if (projects && projects.length > 0) {
          projects.forEach(project => {
            const card = document.createElement('div');
            card.className = 'project-card';
            const img = document.createElement('img');
            img.src = project.projectImg ? `/${project.projectImg}` : '/Uploads/placeholder.jpg';
            img.alt = project.name || 'No image';
            img.onerror = () => { img.src = '/Uploads/placeholder.jpg'; };
            card.appendChild(img);
            const detail = document.createElement('div');
            detail.className = 'project-details';
            detail.innerHTML = `
              <h3>${project.name || 'Untitled'}</h3>
              <p><strong>Title:</strong> ${project.title || 'No title'}</p>
              <p><strong>Description:</strong> ${project.description || 'No description'}</p>
              <p><strong>Created:</strong> ${project.createdAt ? new Date(project.createdAt).toLocaleDateString() : 'Unknown'}</p>
              <div class="action-buttons">
                <button class="edit-btn" onclick="openEditModal('${project._id}', '${project.name}', '${project.title}', '${project.description}')">Edit</button>
                <button class="delete-btn" onclick="deleteProject('${project._id}')">Delete</button>
              </div>
            `;
            card.appendChild(detail);
            projectList.appendChild(card);
          });
        } else {
          projectList.innerHTML = '<p class="error-message">No projects found.</p>';
        }
      } catch (error) {
        document.getElementById('project-list').innerHTML = '<p class="error-message">Error loading projects.</p>';
      }
    }

    async function deleteProject(id) {
      if (!confirm('Are you sure you want to delete this project?')) return;
      try {
        const response = await fetch(`/api/delete/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
        });
        const messageDiv = document.getElementById('message');
        if (response.ok) {
          messageDiv.innerHTML = '<p class="success-message">Project deleted successfully</p>';
          fetchProjects(document.getElementById('search-input').value);
        } else {
          const error = await response.json();
          messageDiv.innerHTML = `<p class="error-message">${error.message || 'Failed to delete project'}</p>`;
        }
      } catch (error) {
        document.getElementById('message').innerHTML = '<p class="error-message">Error deleting project</p>';
      }
    }

    function openEditModal(id, name, title, description) {
      document.getElementById('edit-id').value = id;
      document.getElementById('edit-name').value = name;
      document.getElementById('edit-title').value = title;
      document.getElementById('edit-description').value = description;
      document.getElementById('edit-projectImg').value = '';
      document.getElementById('edit-modal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('edit-modal').style.display = 'none';
      document.getElementById('edit-form').reset();
    }

    async function updateProject(event) {
      event.preventDefault();
      const form = document.getElementById('edit-form');
      const formData = new FormData(form);
      const id = document.getElementById('edit-id').value;
      const messageDiv = document.getElementById('message');
      try {
        const response = await fetch(`/api/update-project/${id}`, {
          method: 'POST',
          body: formData,
        });
        if (response.ok) {
          messageDiv.innerHTML = '<p class="success-message">Project updated successfully</p>';
          closeModal();
          fetchProjects(document.getElementById('search-input').value);
        } else {
          const error = await response.json();
          messageDiv.innerHTML = `<p class="error-message">${error.message || 'Failed to update project'}</p>`;
        }
      } catch (error) {
        messageDiv.innerHTML = '<p class="error-message">Error updating project</p>';
      }
    }

    document.addEventListener('DOMContentLoaded', () => fetchProjects());
    document.getElementById('search-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const searchQuery = document.getElementById('search-input').value;
      fetchProjects(searchQuery);
    });
    document.getElementById('edit-form').addEventListener('submit', updateProject);
  </script>
</body>
</html>
